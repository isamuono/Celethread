<div class="modal-dialog modal-dialog-centered">
  <div class="modal-content tcomment-users-index">
    <div class="modal-header">
      <p class="modal-title">コメント一覧</p>
    </div>
    <div class="modal-body tcomment-modal-body">
      <div class="comment-index" id="comment-index<%= gthread.id %>">
        <% comments.each do |tcomment| %>
          <% if tcomment.user_id == current_user.id %>
            <%= render partial: 'comments/my_comment', locals: { tcomment: tcomment } %>
          <% else %>
            <%= render partial: 'comments/others_comment', locals: { tcomment: tcomment } %>
          <% end %>
        <% end %>
      </div>
      <div class="tcomment-footer" id="modal-footer<%= gthread.id %>">
        <%= form_with model: @comment, url: { controller: 'comments', action: 'create', method: :post }, html: { autocapitalize: "off", autocorrect: "off" }, local: false do |f| %>
          <div class="form-group" id="resizebox">
            <%= f.hidden_field :gthread_id, :value => gthread.id, id: "comment_hidden_field#{ gthread.id }" %>
            <%= f.text_area :text, class: "form-control form-control-lg tcomment-textarea", id: "commentTextForm#{ gthread.id }", rows: "1", placeholder: "#{ gthread.title.truncate(15, omission: '･･･') } にコメント", required: true %>
            <%= f.button type: "submit", class: "btn btn-block tcomment-submit-btn", id: "submit#{ gthread.id }" do %>
              <i class="fas fa-paper-plane"></i>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>
<script>
  // tippy.js
  tippy('.tcomment-submit-btn', {
    content: '送信する',
    theme: 'black',
    delay: [100, 0],
  });
  tippy('.comment-destroy-icon', {
    content: '削除する',
    theme: 'black',
    delay: [100, 0],
  });
  
  // コメントフォーム
  var $submit_btn = $("#submit<%= gthread.id %>");
  var $text_field = document.getElementById("commentTextForm<%= gthread.id %>");
  
  $submit_btn.prop("disabled", true);
  
  // 最低行数と最高幅を指定
  const maxLineCount = 13;
    
  $text_field.addEventListener('input', function() {
    //未入力の場合送信ボタン使用不可
    if ($text_field.value.length >= 1 && !$text_field.value.match(/\S/g) == '') {
      $submit_btn.prop('disabled', false);
    } else {
      $submit_btn.prop('disabled', true);
    }
    
    changeLineCheck();
  });
  
  const getLineCount = function() {
    return ($text_field.value + "\n").match(/\r?\n/g).length;
  };

  let lineCount = getLineCount();
  let newLineCount;
  
  const changeLineCheck = function() {
    // 現在の入力行数を取得（ただし，最大の行数は maxLineCount とする）
    newLineCount = Math.min(getLineCount(), maxLineCount);
    
    // 以前の入力行数と異なる場合は変更する
    if (lineCount !== newLineCount) {
      changeLineCount(newLineCount);
    }
  };
  
  const comment_index = document.getElementById("comment-index<%= gthread.id %>");
  let footerHeight = $text_field.scrollHeight;
  let newFooterHeight,
      footerHeightDiff;
  
  $text_field.addEventListener('input', changeLineCount = (newLineCount) => {
    $text_field.rows = lineCount;
    lineCount = newLineCount;
    
    // 文字量によって自動で高さが変わるtextarea
    $(".tcomment-textarea").height(0).innerHeight($text_field.scrollHeight);
    
    newFooterHeight = $text_field.scrollHeight;
    footerHeightDiff = newFooterHeight - footerHeight;
    if (footerHeightDiff > 0 && lineCount < maxLineCount) {
      comment_index.style.height = 501 - newFooterHeight + 40 + "px";
      comment_index.scrollBy(0, footerHeightDiff);
    } else if (footerHeightDiff < 0 && lineCount < maxLineCount - 1) {
      comment_index.scrollBy(0, footerHeightDiff);
      comment_index.style.height = 501 - newFooterHeight + 40 + "px";
    }
    footerHeight = newFooterHeight;
  });
  
  
  App.comment = App.cable.subscriptions.create('CommentChannel', {
    connected: function() {
      // Called when the subscription is ready for use on the server
    },
    disconnected: function() {
      // Called when the subscription has been terminated by the server
    },
    received: function(data) {
      var href = location.href;
      
      var comment_id = data['comment_id'];
      var gthread_id = data['gthread_id'];
      var g_uid = data['g_uid'];
      var comment_user_id = data['user_id'];
      
      if (href.match(`/channels/${ data['channel_id'] }/gthreads/${ data['g_uid'] }`)) {
        if (gon.current_user_id == comment_user_id) {
          document.getElementById('comment-index' + gthread_id).insertAdjacentHTML("beforeend", data['my_comment']);
          
          $text_field.value = '';
          $submit_btn.prop('disabled', true);
          
          const windowWidth = document.documentElement.clientWidth;
          
          if (windowWidth >= 768) {
            comment_index.style.height = 501 + 'px';
            $text_field.style.height = 42 + 'px';
          } else if (windowWidth <= 767) {
            comment_index.style.height = 501 + 'px';
            $text_field.style.height = 30 + 'px';
          }
        } else {
          document.getElementById('comment-index' + gthread_id).insertAdjacentHTML("beforeend", data['others_comment']);
        }
      }
      
      // tippy.js
      tippy('.comment-destroy-icon', {
        content: '削除する',
        theme: 'black',
        delay: [100, 0],
      });
      
      // 削除時確認ダイアログ(sweetalert2)
      $('#comment-destroy-btn' + comment_id).on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
      
        var $link = $(this);
      
        swal.fire({
          icon: 'warning',
          iconColor: 'red',
          title: 'このコメントを削除してもよろしいですか？',
          confirmButtonText: '削除する',
          confirmButtonColor: '#d33',
          showCancelButton: true,
          cancelButtonText: 'キャンセル',
          focusCancel: true,
          position : 'center',
          allowEscapeKey: true,
          customClass: {
            popup: 'sweetalert-comment-destroy'
          }
        }).then(function(result) {
          if (result.isConfirmed) {
            $.ajax({
              url: `/comments/${ comment_id }`,
              type: 'DELETE',
            });
          }
        }, function(dismiss) {});
      });
    }
  });
</script>